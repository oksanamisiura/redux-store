{"ast":null,"code":"var _jsxFileName = \"/Users/a1/Desktop/todo-redux/src/components/book-list/book-list.js\";\nimport React, { Component } from 'react';\nimport BookListItem from '../book-list-item';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withBookstoreService } from '../hoc';\nimport { booksLoaded, booksRequested, bookError } from '../../actions';\nimport compose from '../../utils';\nimport Spinner from '../spinner';\nimport './book-list.css';\n\nclass BookList extends Component {\n  componentDidMount() {\n    const {\n      bookstoreService,\n      booksLoaded,\n      booksRequested\n    } = this.props;\n    booksRequested();\n    bookstoreService.getBooks().then(data => {\n      booksLoaded(data);\n    });\n  }\n\n  render() {\n    const {\n      books,\n      loading\n    } = this.props;\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"book-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, books.map(book => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: book.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(BookListItem, {\n        book: book,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }\n      }));\n    }));\n  }\n\n}\n\n;\n\nconst mapStateToProps = ({\n  books,\n  loading\n}) => {\n  return {\n    books,\n    loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    booksLoaded,\n    booksRequested,\n    bookError\n  }, dispatch);\n};\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookList);","map":{"version":3,"sources":["/Users/a1/Desktop/todo-redux/src/components/book-list/book-list.js"],"names":["React","Component","BookListItem","bindActionCreators","connect","withBookstoreService","booksLoaded","booksRequested","bookError","compose","Spinner","BookList","componentDidMount","bookstoreService","props","getBooks","then","data","render","books","loading","map","book","id","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,SAAtC,QAAuD,eAAvD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAGA,OAAO,iBAAP;;AAEA,MAAMC,QAAN,SAAuBV,SAAvB,CAAiC;AAC/BW,EAAAA,iBAAiB,GAAG;AAElB,UAAM;AAAEC,MAAAA,gBAAF;AAAoBP,MAAAA,WAApB;AAAiCC,MAAAA;AAAjC,QAAoD,KAAKO,KAA/D;AACAP,IAAAA,cAAc;AACdM,IAAAA,gBAAgB,CAACE,QAAjB,GACGC,IADH,CACSC,IAAD,IAAU;AAAEX,MAAAA,WAAW,CAACW,IAAD,CAAX;AAAoB,KADxC;AAID;;AACDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAqB,KAAKN,KAAhC;;AAEA,QAAIM,OAAJ,EAAa;AACX,0BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,wBACE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEID,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AAClB,0BAAQ;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACN,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAED,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADM,CAAR;AAGD,KAJD,CAFJ,CADF;AAWD;;AA3B8B;;AA4BhC;;AAED,MAAME,eAAe,GAAG,CAAC;AAAEL,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAC9C,SAAO;AACLD,IAAAA,KADK;AAELC,IAAAA;AAFK,GAAP;AAID,CALD;;AAMA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAOvB,kBAAkB,CAAC;AACxBG,IAAAA,WADwB;AAExBC,IAAAA,cAFwB;AAGxBC,IAAAA;AAHwB,GAAD,EAItBkB,QAJsB,CAAzB;AAKD,CAND;;AASA,eAAejB,OAAO,CACpBJ,oBAAoB,EADA,EAEpBD,OAAO,CAACoB,eAAD,EAAkBC,kBAAlB,CAFa,CAAP,CAEiCd,QAFjC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport BookListItem from '../book-list-item';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withBookstoreService } from '../hoc';\nimport { booksLoaded, booksRequested, bookError } from '../../actions';\nimport compose from '../../utils';\nimport Spinner from '../spinner';\n\n\nimport './book-list.css';\n\nclass BookList extends Component {\n  componentDidMount() {\n\n    const { bookstoreService, booksLoaded, booksRequested } = this.props;\n    booksRequested();\n    bookstoreService.getBooks()\n      .then((data) => { booksLoaded(data); });\n\n\n  }\n  render() {\n    const { books, loading } = this.props;\n\n    if (loading) {\n      return <Spinner />\n    }\n    return (\n      <ul className=\"book-list\">\n        {\n          books.map((book) => {\n            return (<li key={book.id}>\n              <BookListItem book={book} />\n            </li>)\n          })\n        }\n      </ul>\n    );\n  }\n};\n\nconst mapStateToProps = ({ books, loading }) => {\n  return {\n    books,\n    loading\n  }\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({\n    booksLoaded,\n    booksRequested,\n    bookError\n  }, dispatch)\n};\n\n\nexport default compose(\n  withBookstoreService(),\n  connect(mapStateToProps, mapDispatchToProps))(BookList);"]},"metadata":{},"sourceType":"module"}