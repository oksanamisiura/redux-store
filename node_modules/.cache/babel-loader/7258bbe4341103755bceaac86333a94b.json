{"ast":null,"code":"const initialState = {\n  books: [],\n  loading: true,\n  error: null,\n  cartItems: [],\n  orderTotal: 220\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUEST':\n      return { ...state,\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return { ...state,\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return { ...state,\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'BOOK_ADDED_TO_CART':\n      const bookId = action.payload;\n      const book = state.books.find(book => book.id === bookId);\n      const itemIndex = state.cartItems.findIndex(({\n        id\n      }) => id === bookId);\n      const item = state.cartItems[itemIndex];\n      const newItem = {\n        id: book.id,\n        name: book.title,\n        count: 1,\n        total: book.price\n      };\n\n      if (item) {\n        newItem = { ...item,\n          count: state.count + 1,\n          total: item.total + book.price\n        };\n      } else {\n        newItem = {\n          id: book.id,\n          name: book.name,\n          count: 1,\n          total: book.price\n        };\n      }\n\n      ;\n\n      if (itemIndex < 0) {\n        return { ...state,\n          cartItems: [...state.cartItems, newItem]\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems.slice(0, itemindex), newItem, ...state.cartItems.slice(itemIndex + 1)]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/a1/Desktop/todo-redux/src/reducers/index.js"],"names":["initialState","books","loading","error","cartItems","orderTotal","reducer","state","action","type","payload","bookId","book","find","id","itemIndex","findIndex","item","newItem","name","title","count","total","price","slice","itemindex"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,SAAS,EAAE,EAJQ;AAKnBC,EAAAA,UAAU,EAAE;AALO,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAEhD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,qBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELN,QAAAA,KAAK,EAAE,EAFF;AAGLC,QAAAA,OAAO,EAAE,IAHJ;AAILC,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAMF,SAAK,qBAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELN,QAAAA,KAAK,EAAEO,MAAM,CAACE,OAFT;AAGLR,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAMF,SAAK,qBAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELN,QAAAA,KAAK,EAAE,EAFF;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAJT,OAAP;;AAMF,SAAK,oBAAL;AACE,YAAMC,MAAM,GAAGH,MAAM,CAACE,OAAtB;AACA,YAAME,IAAI,GAAGL,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAkBD,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYH,MAAvC,CAAb;AACA,YAAMI,SAAS,GAAGR,KAAK,CAACH,SAAN,CAAgBY,SAAhB,CAA0B,CAAC;AAAEF,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKH,MAA7C,CAAlB;AACA,YAAMM,IAAI,GAAGV,KAAK,CAACH,SAAN,CAAgBW,SAAhB,CAAb;AACA,YAAMG,OAAO,GAAG;AACdJ,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADK;AAEdK,QAAAA,IAAI,EAAEP,IAAI,CAACQ,KAFG;AAGdC,QAAAA,KAAK,EAAE,CAHO;AAIdC,QAAAA,KAAK,EAAEV,IAAI,CAACW;AAJE,OAAhB;;AAOA,UAAIN,IAAJ,EAAU;AACRC,QAAAA,OAAO,GAAG,EACR,GAAGD,IADK;AAERI,UAAAA,KAAK,EAAEd,KAAK,CAACc,KAAN,GAAc,CAFb;AAGRC,UAAAA,KAAK,EAAEL,IAAI,CAACK,KAAL,GAAaV,IAAI,CAACW;AAHjB,SAAV;AAKD,OAND,MAMO;AACLL,QAAAA,OAAO,GAAG;AACRJ,UAAAA,EAAE,EAAEF,IAAI,CAACE,EADD;AAERK,UAAAA,IAAI,EAAEP,IAAI,CAACO,IAFH;AAGRE,UAAAA,KAAK,EAAE,CAHC;AAIRC,UAAAA,KAAK,EAAEV,IAAI,CAACW;AAJJ,SAAV;AAMD;;AAAA;;AACD,UAAIR,SAAS,GAAG,CAAhB,EAAmB;AACjB,eAAO,EACL,GAAGR,KADE;AAELH,UAAAA,SAAS,EAAE,CACT,GAAGG,KAAK,CAACH,SADA,EAETc,OAFS;AAFN,SAAP;AAOD,OARD,MAQO;AACL,eAAO,EACL,GAAGX,KADE;AAELH,UAAAA,SAAS,EAAE,CACT,GAAGG,KAAK,CAACH,SAAN,CAAgBoB,KAAhB,CAAsB,CAAtB,EAAyBC,SAAzB,CADM,EAETP,OAFS,EAGT,GAAGX,KAAK,CAACH,SAAN,CAAgBoB,KAAhB,CAAsBT,SAAS,GAAG,CAAlC,CAHM;AAFN,SAAP;AAQD;;AAGH;AACE,aAAOR,KAAP;AArEJ;AAuED,CAzED;;AA2EA,eAAeD,OAAf","sourcesContent":["const initialState = {\n  books: [],\n  loading: true,\n  error: null,\n  cartItems: [],\n  orderTotal: 220\n};\n\nconst reducer = (state = initialState, action) => {\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUEST':\n      return {\n        ...state,\n        books: [],\n        loading: true,\n        error: null\n      };\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        ...state,\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        ...state,\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n    case 'BOOK_ADDED_TO_CART':\n      const bookId = action.payload;\n      const book = state.books.find((book) => book.id === bookId);\n      const itemIndex = state.cartItems.findIndex(({ id }) => id === bookId);\n      const item = state.cartItems[itemIndex];\n      const newItem = {\n        id: book.id,\n        name: book.title,\n        count: 1,\n        total: book.price\n      }\n\n      if (item) {\n        newItem = {\n          ...item,\n          count: state.count + 1,\n          total: item.total + book.price\n        };\n      } else {\n        newItem = {\n          id: book.id,\n          name: book.name,\n          count: 1,\n          total: book.price\n        }\n      };\n      if (itemIndex < 0) {\n        return {\n          ...state,\n          cartItems: [\n            ...state.cartItems,\n            newItem\n          ]\n        };\n      } else {\n        return {\n          ...state,\n          cartItems: [\n            ...state.cartItems.slice(0, itemindex),\n            newItem,\n            ...state.cartItems.slice(itemIndex + 1)\n          ]\n        };\n      }\n\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}